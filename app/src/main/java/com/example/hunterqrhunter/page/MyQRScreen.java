package com.example.hunterqrhunter.page;

import android.graphics.Bitmap;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.widget.EditText;
import android.widget.ListView;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import com.example.hunterqrhunter.R;
import com.example.hunterqrhunter.model.HashQR;
import com.example.hunterqrhunter.model.QR;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FieldPath;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;

public class MyQRScreen extends AppCompatActivity {
    {/**
     []MyQRScreen has all the QRs the player acquired
     [v]Number of the Qrs
     [v]Score of the player
     []Player can delete the QR if they want to
     [x]Player can sort (Not in the user stories)
     */}
    private FirebaseFirestore db;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my_qr);

        //unique user ID generated by the device
        String userID = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);

        //Initialize firestore database
        db = FirebaseFirestore.getInstance();

        //get the total score of the user
        AtomicInteger totalScore = new AtomicInteger(0);

        //total number of the QRs
        AtomicInteger totalQRs = new AtomicInteger();

        //get the QR collection
        CollectionReference qrRef = db.collection("QR");

        //arrayList to store the QRs
        ArrayList<Bitmap> qrList = new ArrayList<>();

        //Initialize the HashQR class
        HashQR hashQR = new HashQR();

        //if userID and qrRef's uid is the same, then get the score of the user
        qrRef.whereEqualTo(FieldPath.of("uid"), userID).get().addOnCompleteListener(task -> {
            if (task.isSuccessful()) {
                for (DocumentSnapshot document : task.getResult()) {

                    //get the score of the user and add it to the total score
                    Integer score = Integer.parseInt(document.getData().get("score").toString());

                    //update the total score
                    totalScore.addAndGet(score);

                    //update the total number of the QRs
                    totalQRs.getAndIncrement();

                    ListView myQRList = findViewById(R.id.QRList);

                    //get the qrcode field from the QR document
                    String qrCode = document.getData().get("qrcode").toString();

                    //create a face class based on the qrCode
                    byte[] hash = hashQR.hashObject(qrCode);
                    Bitmap faceBitmap = hashQR.generateImageFromHashcode(hash);

                    //store the faceBitmap to the arrayList
                    qrList.add(faceBitmap);

                    Log.d("MyQRScreen", document.getId() + " => " + document.getData());
                }
                EditText scoreText = findViewById(R.id.UserScore);
                scoreText.setText(totalScore.toString());
                EditText qrText = findViewById(R.id.NumQR);
                qrText.setText(totalQRs.toString());

                ListView faceList = findViewById(R.id.QRList);

                //iterate through the arrayList and display the QRs to the faceList
                for (Bitmap face : qrList) {
                    faceList.setImageBitmap(face);
                }

            } else {
                Log.d("MyQRScreen", "Error getting documents: ", task.getException());
            }
        });
    }
}
